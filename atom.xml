<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://sandreams.github.io</id>
    <title>Gridea</title>
    <updated>2020-10-17T09:18:47.717Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://sandreams.github.io"/>
    <link rel="self" href="https://sandreams.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://sandreams.github.io/images/avatar.png</logo>
    <icon>https://sandreams.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[CSS知识总结]]></title>
        <id>https://sandreams.github.io/post/css-zhi-shi-zong-jie/</id>
        <link href="https://sandreams.github.io/post/css-zhi-shi-zong-jie/">
        </link>
        <updated>2020-10-17T09:17:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="font-size5浏览器渲染原理font"><font size=5>浏览器渲染原理</font></h2>
<h4 id="步骤">步骤</h4>
<pre><code>  1. 根据HTML构建HTML树(DOM)
  2. 根据CSS构建CSS树(CSSDOM)
  3. 将两棵树合并成一颗渲染树(render tree)
  4. Layout布局(文档流、盒模型、计算大小和位置)
  5. Paint绘制(把边框颜色、文字颜色、阴影等绘出来)
  6. Compose合成(根据层叠关系展示画面)
</code></pre>
<h4 id="三种不同渲染方式">三种不同渲染方式</h4>
<p><img src="https://i.imgur.com/ZyAjvkn.png" alt="172cd0feecff073" loading="lazy"><br>
在 Blink 内核下的 3 种场景举例:</p>
<ol>
<li>Layout: 改变 align-content 的值、改变 margin 的值 会重新计算位置</li>
<li>Paint: 改变 background-color 不改变位置,但改变了视觉属性所以会重新绘制</li>
<li>Compose: 改变 transform 的值,</li>
</ol>
<h2 id="font-size5css-定位font"><font size=5>CSS 定位</font></h2>
<p>定位通过 position 属性进行创建,一共分为 5 个值:</p>
<ul>
<li>static 默认值，待在文档流里</li>
<li>relative 相对定位，升起来，但不脱离文档流</li>
<li>absolute 绝对定位，定位基准是祖先元素里的非 static，最近的定位元素</li>
<li>fixed 固定定位，定位基准是 viewport 视口</li>
<li>sticky 粘滞定位，在移动端存在太多 bug，不做过多介绍</li>
</ul>
<h4 id="positionrelative">position:relative</h4>
<p>使用场景:</p>
<ol>
<li>用于约束 absolute 元素</li>
<li>有 absolute 元素时用其控制层级关系</li>
<li>并未脱离文档流</li>
</ol>
<p>最小化影响原则:<br>
relative 定位的元素里的子元素越少越好,避免后期维护困难,如下所示</p>
<pre><code class="language-html">&lt;!-- 未遵循最小化原则的代码 --&gt;
&lt;div style=&quot;position: relative&quot;&gt;
  &lt;img src=&quot;icon.png&quot; style=&quot;position: absolute;top:0;right:0&quot; /&gt;
  &lt;p&gt;内容1&lt;/p&gt;
  &lt;p&gt;内容2&lt;/p&gt;
  &lt;p&gt;内容3&lt;/p&gt;
  ...
&lt;/div&gt;
</code></pre>
<pre><code class="language-html">&lt;!-- 遵循最小化原则的代码 --&gt;
&lt;div&gt;
  &lt;div style=&quot;position: relative&quot;&gt;
    &lt;img src=&quot;icon.png&quot; style=&quot;position: absolute;top:0;right:0&quot; /&gt;
  &lt;/div&gt;
  &lt;p&gt;内容1&lt;/p&gt;
  &lt;p&gt;内容2&lt;/p&gt;
  &lt;p&gt;内容3&lt;/p&gt;
  ...
&lt;/div&gt;
</code></pre>
<h4 id="positionabsolute">position:absolute</h4>
<p>特性:</p>
<ol>
<li>无依赖定位</li>
<li>包裹性</li>
<li>块状化</li>
<li>相对特性</li>
</ol>
<p>使用场景:</p>
<ol>
<li>各类图标定位</li>
<li>表单校验提示错误</li>
</ol>
<ul>
<li>善用 left: 100%</li>
<li>善用 left: 50% 加负 margin</li>
</ul>
<h4 id="positionfixed">position:fixed</h4>
<p>使用场景如下：</p>
<ol>
<li>广告</li>
<li>回到顶部按钮</li>
</ol>
<p>需配合 z-index 使用</p>
<ul>
<li>只要元素定位了，自动跑到所有东西最上层。默认 z-index = 0</li>
<li>所有定位元素会以文字为基准，第一层为 0 ，以此类推</li>
<li>如果是 -1 ，比背景还要低，可以无限往后，但是不能超过默认的层叠上下文</li>
</ul>
<h4 id="层叠上下文">层叠上下文</h4>
<ul>
<li>比喻<br>
每个层叠上下文就是一个新的小世界(作用域)<br>
这个小世界里面的 z-index 跟外界无关<br>
处在同一个小世界的 z-index 才能比较</li>
<li>哪些不正交的属性可以创建它<br>
需要记住的有 z-index/flex/opacity/transform</li>
</ul>
<h2 id="font-size5css-动画font"><font size=5>CSS 动画</font></h2>
<h4 id="原理">原理</h4>
<p>CSS 动画也叫作关键帧动画。通过<font color='red'>@keyframes </font>来定义关键帧。<br>
CSS 里的帧和电影里图片一帧帧播放原理相似,开发者无需给出每一帧的定义。只需要定义一些关键的帧即可。因为其余帧浏览器会自动计算出来。</p>
<h4 id="transform">transform</h4>
<p>四个常用功能</p>
<ul>
<li>位移 translate</li>
<li>缩放 scale</li>
<li>旋转 rotate</li>
<li>倾斜 skew</li>
</ul>
<h5 id="translate">translate</h5>
<p>translate 的值有如下形式:</p>
<ul>
<li>单个长度/百分比值,比如</li>
</ul>
<pre><code class="language-css">/* 表示在二维平面内平移, 与声明了X轴和Y轴的平移一样 */
translate: 100px;
translate: 50%;
</code></pre>
<ul>
<li>两个长度/百分比值 比如</li>
</ul>
<pre><code class="language-css">/* 表示在二维平面内分别按照指定X轴和Y轴的值进行的平移 */
translate: 100px 200px;
translate: 50% 105px;
</code></pre>
<ul>
<li>三个长度/百分比值 如下</li>
</ul>
<pre><code class="language-css">/* 表示分别指定X轴、Y轴、Z轴的值进行三维平移 */
translate: 50% 105px 5rem;
</code></pre>
<ul>
<li>none<br>
表示不应用平移效果</li>
</ul>
<h5 id="scale">scale</h5>
<ul>
<li><font color="#ff502c" size=2>scaleX(<number>) </font></li>
<li><font color="#ff502c" size=2> scaleY(<number>)</font></li>
<li><font color="#ff502c" size=2> scale(&lt;number&gt;, &lt;number&gt;?) </font></li>
</ul>
<h5 id="rotate">rotate</h5>
<ul>
<li><font color="#ff502c" size=2> rotate([&lt;angle&gt; | &lt;zero&gt;]) </font></li>
<li><font color="#ff502c" size=2> rotateX([&lt;angle&gt; | &lt;zero&gt;]) </font> ,以 X 轴旋转</li>
<li><font color="#ff502c" size=2> rotateY([&lt;angle&gt; | &lt;zero&gt;]) </font> ,以 Y 轴旋转</li>
<li><font color="#ff502c" size=2> rotateZ([&lt;angle&gt; | &lt;zero&gt;]) </font> ,以 Z 轴旋转</li>
<li><font color="#ff502c" size=2> rotate3d([&lt;angle&gt; | &lt;zero&gt;]) </font></li>
</ul>
<h4 id="transition-过渡">transition 过渡</h4>
<h5 id="作用">作用</h5>
<p>补充中间帧</p>
<h5 id="语法">语法</h5>
<ul>
<li>transition: 属性名 时长 过渡方式 延迟</li>
<li>transition: left 200ms linear</li>
<li>transition: left 200ms, top 400ms 可以用逗号分隔两个不同的属性</li>
<li>transition: all 200ms 可以用 all 代表所有属性</li>
<li>过渡方式有：linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier | step-start | step-end | steps</li>
</ul>
<h4 id="animation">animation</h4>
<h5 id="keyframes-完整语法">@keyframes 完整语法</h5>
<ul>
<li>一种写法是 from to</li>
</ul>
<pre><code class="language-css">@keyframes xxx {
  from {
    transform: translateX(0%);
  }
  to {
    transform: translateX(100%);
  }
}
</code></pre>
<ul>
<li>另一种写法是百分数</li>
</ul>
<pre><code class="language-css">@keyframes xxx {
  0% {
    transform: none;
  }
  66.66% {
    transform: translateX(200px);
  }
  100% {
    transform: translateX(200px) translateY(100px);
  }
}
</code></pre>
<h5 id="animation-缩写写法">animation 缩写写法</h5>
<p>animation: 时长 | 过渡方式 | 延迟 | 次数 | 方向 | 填充模式 | 是否暂停 | 动画名;</p>
<ul>
<li>时长：1s 或 1000ms</li>
<li>过渡方式：跟 transition 取值一样</li>
<li>次数：3 或者 2.4 或者 infinite</li>
<li>方向：reverse | alternate | alternate-reverse</li>
<li>填充模式：none | forwards | backwards | both</li>
<li>是否暂停：paused | running</li>
<li>以上所有属性都有对应的单独属性</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTML常用标签]]></title>
        <id>https://sandreams.github.io/post/html-chang-yong-biao-qian/</id>
        <link href="https://sandreams.github.io/post/html-chang-yong-biao-qian/">
        </link>
        <updated>2020-09-02T16:56:54.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1a-标签的用法">1.a 标签的用法</h2>
<h3 id="属性">属性</h3>
<ul>
<li>
<p>href<br>
可以是网址 带协议和不带协议 ；可以是路径 相对路径和绝对路径 ；可以是伪协议 比如<code>&lt;a href=&quot;javascript:;&quot;&gt;</code>表示不执行任何操作</p>
</li>
<li>
<p>target<br>
内置名字有: _blank 表示在新窗口打开;_self 表示当前页面加载,默认为该值; _parent 加载响应到当前框架的 HTML4 父框架或当前的 HTML5 浏览上下文的父浏览上下文。如果没有 parent 框架或者浏览上下文，此选项的行为方式与 _self 相同; _top 表示在当前框架最顶层的窗口打开。如果没有 parent 框架或者浏览上下文，此选项的行为方式与 _self 相同.</p>
</li>
<li>
<p>download:<br>
当我们希望点击“下载”链接下载图片而不是浏览，直接增加一个 download 属性就可以</p>
<pre><code class="language-html">&lt;a href=&quot;large.jpg&quot; download=&quot;filename&quot;&gt;下载&lt;/a&gt;
</code></pre>
<p>filename 为指定的文件名</p>
</li>
<li>
<p>rel=noopener:<br>
这是一个很重要的且常用的 rel 属性值，与安全相关。<br>
如果我们的链接元素没有设置 noopener，则在新窗口打开这个链接的时候，则这个新窗口页面可以通过 window.opener 获取来源页面的窗体对象，于是可以改变原页面 URL 地址之类的事情。<br>
因此，如果网站上有外部的链接地址，一定要记得加上 noopener。</p>
</li>
</ul>
<h3 id="关于路径">关于路径</h3>
<ol>
<li>绝对路径: /a/b/c,'/'代表根目录,在哪里开启的服务网站的根目录就在那里</li>
<li>相对路径: a/b/c 或./a/b/c 相对于当前目录的路径 如果当前目录在 a,需要去访问 c.html 则路径为 b/c.html 或者./b/c.html</li>
</ol>
<h2 id="2img-标签的用法">2.img 标签的用法</h2>
<ul>
<li>作用
<ul>
<li>发出 get 请求，展示一张图片</li>
</ul>
</li>
<li>属性
<ul>
<li>alt(alternative)<br>
图片加载失败后提示的文字</li>
<li>height<br>
指定图片固定高度，如果只写 height，图片宽度会保持原有比例下自适应</li>
<li>width<br>
指定图片固定宽度，如果只写 width，图片高度会保持原有比例下自适应</li>
<li>src<br>
图片路径 可以为绝对地址或相对地址</li>
</ul>
</li>
<li>事件
<ul>
<li>onload<br>
图片加载成功触发的事件</li>
<li>onerror<br>
图片加载失败触发的事件</li>
<li>可以通过事件返回的结果来判断图片是否加载成功</li>
<li>可以再 onerror 时更改 src 的值替换备用图片</li>
</ul>
</li>
<li>响应式<br>
设置 max-width: 100%能在手机上自适应</li>
</ul>
<h2 id="3table-标签的用法">3.table 标签的用法</h2>
<h3 id="相关标签和说明">相关标签和说明</h3>
<ul>
<li>
<p>thead: 定义了一组定义表格的列头的行。</p>
</li>
<li>
<p>tbody(table body): 封装了一组 tr 元素，来组成表的身体</p>
</li>
<li>
<p>tr(table row): 代表表格中的一行。</p>
</li>
<li>
<p>tfoot(table foot): 表示表格中各列的汇总行。</p>
</li>
<li>
<p>td(table data):表示一个包含数据的表格单元格。</p>
</li>
<li>
<p>th(table header cell): 表示表格内的表头单元格。</p>
</li>
<li>
<p>下图是一个简单的表格元素</p>
<pre><code class="language-html">&lt;p&gt;Table with thead, tfoot, and tbody&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Header content 1&lt;/th&gt;
      &lt;th&gt;Header content 2&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Footer content 1&lt;/td&gt;
      &lt;td&gt;Footer content 2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Body content 1&lt;/td&gt;
      &lt;td&gt;Body content 2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</code></pre>
</li>
</ul>
<p>Table with thead, tfoot, and tbody</p>
<table>
  <thead>
    <tr>
      <th>Header content 1</th>
      <th>Header content 2</th>
    </tr>
  </thead>
  <tfoot>
    <tr>
      <td>Footer content 1</td>
      <td>Footer content 2</td>
    </tr>
  </tfoot>
  <tbody>
    <tr>
      <td>Body content 1</td>
      <td>Body content 2</td>
    </tr>
  </tbody>
</table>
<h3 id="相关的样式">相关的样式</h3>
<ul>
<li>table-layout
<ul>
<li>auto<br>
自动计算表格单元格的宽度</li>
<li>fixed<br>
表格和列的宽度通过表格的宽度来设置</li>
</ul>
</li>
<li>border-collapse
<ul>
<li>collapse<br>
相邻的单元格共用同一条边框</li>
<li>separate<br>
默认值。每个单元格拥有独立的边框</li>
</ul>
</li>
<li>border-spacing<br>
该属性只适用于 border-collapse 值是 separate 的时候。表示两个相邻单元格边框的间距</li>
</ul>
<h2 id="4form-标签的用法">4.form 标签的用法</h2>
<ul>
<li>作用<br>
发送 post 或 get 请求，然后<font color='red'>刷新</font>页面,用于向 Web 服务器提交信息</li>
<li>属性
<ul>
<li>action<br>
处理表单提交的 URL。这个值可被 <code>&lt;button&gt;、&lt;input type=&quot;submit&quot;&gt; 或 &lt;input type=&quot;image&quot;&gt;</code> 元素上的 formaction 属性覆盖。</li>
<li>enctype<br>
提交给服务器的 MIME 类型</li>
<li>method<br>
post 数据会放在请求体 get 请求会附加到 action 属性的 URL 里</li>
<li>target<br>
属性详见上文 a 标签 target 部分，表示在提交表单之后，在哪里显示响应信息。</li>
</ul>
</li>
<li>事件
<ul>
<li>onsubmit</li>
</ul>
</li>
<li>input type=&quot;submit&quot; 和 button type=&quot;submit&quot;区别<br>
button 里还可以包含其他标签而 input 里面只能放纯文本</li>
</ul>
<h2 id="5感想">5.感想</h2>
<p>这堂课程学习了比较常用 html 标签的用法。这些 html 标签总体来说离不开这三样东西 作用、属性、事件,以后学习其他标签的时候也可以从这三部分着手。另外，在写博客的时候我除了查 MDN 还参考了一些大佬的博客，从中学到了不少有趣的知识，通过生动的例子加深了我对这块内容的理解。所以，保持写博客的习惯在今后学习中是必不可少的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTML入门笔记1]]></title>
        <id>https://sandreams.github.io/post/html-ru-men-bi-ji-1/</id>
        <link href="https://sandreams.github.io/post/html-ru-men-bi-ji-1/">
        </link>
        <updated>2020-08-20T16:34:06.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1html是谁发明的">1.HTML是谁发明的</h1>
<blockquote>
<p>1989年，伯纳斯-李在一份备忘录中提出一个基于互联网的超文本系统。他规定HTML并在1990年底    写出浏览器和服务器软件。<br>
—— 《维基百科》<br>
<img src="https://s2.d2scdn.com/2020/08/21/FnepLzTz-HSR8YqQpYMlKOr2VBPA.webp" width = "300" height = "300" alt="李爵士" align=center /></p>
</blockquote>
<h1 id="2html-起手式">2.HTML 起手式</h1>
<pre><code class="language-html">    &lt;!DOCTYPE html&gt;
    &lt;!--文档类型--&gt;
    &lt;html lang=&quot;zh-CN&quot;&gt;
    &lt;!--html标签，lang最开始为en，zh-CN为简体中文--&gt;
    &lt;head&gt;
      &lt;meta charset=&quot;UTF-8&quot; /&gt;
      &lt;!--文件字符编码 和文件编码类型保持一致--&gt;
      &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;
      &lt;title&gt;这是标题&lt;/title&gt;
      &lt;!--网页标题--&gt;
    &lt;/head&gt;
    &lt;body&gt;&lt;/body&gt;
   &lt;/html&gt;
</code></pre>
<h1 id="3常用的表章节的标签介绍">3.常用的表章节的标签介绍</h1>
<pre><code class="language-html">=================================
&lt;!--标题h1最高往下依次降低 使用要点: 避免跳过某级标题, 始终要从 &lt;h1&gt; 开始，接下来依次使用 &lt;h2&gt; 等等。--&gt;
&lt;h1&gt; 一级标题 &lt;\h1&gt;
&lt;h2&gt; 二级标题 &lt;\h2&gt;
&lt;h3&gt; 三级标题 &lt;\h3&gt;
&lt;h4&gt; 四级标题 &lt;\h4&gt;
&lt;h5&gt; 五级标题 &lt;\h5&gt;
 &lt;h6&gt;六级标题&lt;/h6&gt;
=================================
&lt;!--章节 一般来说，一个 &lt;section&gt; 应该出现在文档大纲中 section可以内嵌 类似章节1 章节1.1 章节1.1.1的关系 --&gt;
&lt;section&gt; 章节 &lt;\section&gt;
=================================
&lt;!--文章--&gt;
&lt;!--对于一段主题性的内容，则就适用 section，而假如这段内容可以脱离上下文，作为完整的独立存在的一段内容，则就适用 article--&gt;
&lt;article&gt; 文章 &lt;\article&gt;
=================================
&lt;!--顶部内容，一般用于展示介绍性内容--&gt;
&lt;header&gt; 这是广告位 &lt;\header&gt;
=================================
&lt;!--主要内容标签--&gt;
&lt;main&gt; 主要内容 &lt;\main&gt;
=================================
&lt;!--旁支内容 表示一个和其余页面内容几乎无关的部分 比如版权声明--&gt;
&lt;aside&gt; 旁支内容 &lt;\aside&gt;
=================================
&lt;!--区域划分 在语义上不表示任何特定类型的内容。然而，其可以将内容分组--&gt;
&lt;!-- div到section到article语义从无到有 逐渐增强--&gt;
&lt;div&gt; 区域划分 &lt;\div&gt;
=================================

</code></pre>
<h1 id="4全局属性">4.全局属性</h1>
<ul>
<li>id<br>
定义唯一标识符（ID），该标识符在整个文档中必须是唯一的。平时尽量使用class,少用id,当两个标签具有同一个id时不会报错。</li>
</ul>
<pre><code class="language-html">    &lt;div id=&quot;only-1&quot;&gt;&lt;/div&gt;
    &lt;div id=&quot;only-2&quot;&gt;&lt;/div&gt;
    &lt;!--id必须是唯一的--&gt;
</code></pre>
<ul>
<li>class</li>
</ul>
<pre><code class="language-html">    &lt;button class=&quot;btn&quot;&gt;&lt;/button&gt;
    &lt;button class=&quot;btn&quot;&gt;&lt;/button&gt;
    &lt;!--class相同则为同一类--&gt;
    &lt;button class=&quot;btn btn-large btn-active&quot;&gt;&lt;/button&gt;
    &lt;!--一个标签能有多个class--&gt;
</code></pre>
<ul>
<li>contenteditable<br>
一个枚举属性（enumerated attribute），表示元素是否可被用户编辑。</li>
</ul>
<pre><code class="language-html">   &lt;div contenteditable=&quot;true&quot;&gt;
          &lt;p&gt;元素可以被编辑&lt;/p&gt;
   &lt;/div&gt;
    &lt;div contenteditable=&quot;false&quot;&gt;
          &lt;p&gt;元素不可以被编辑&lt;/p&gt;
   &lt;/div&gt;
</code></pre>
<ul>
<li>style<br>
含要应用于元素的CSS样式声明。</li>
</ul>
<pre><code class="language-html">    &lt;div style=&quot;margin: 0;display: flex&quot;&gt;hello&lt;/div&gt;
</code></pre>
<ul>
<li>
<p>tabindex<br>
用于网页tab切换网页元素。当值为-1时代表不能切换。正数时按数的大小从小到大切换。 值为0代表最后的切换位。</p>
</li>
<li>
<p>title<br>
包含表示与其所属元素相关信息的文本。 这些信息通常可以作为提示呈现给用户,但不是必须的。</p>
</li>
</ul>
<pre><code class="language-html">    &lt;p&gt;Web开发三大主要技术分别为
      &lt;abbr title=&quot;Hypertext Markup Language&quot;&gt;HTML&lt;/abbr&gt;,
      &lt;abbr title=&quot;Cascading Stylesheets&quot;&gt;CSS&lt;/abbr&gt;, and
      JavaScript.
   &lt;/p&gt;
</code></pre>
<h1 id="5常见的内容标签">5.常见的内容标签</h1>
<ul>
<li>a<br>
可以创建通向其他网页、文件、同一页面内的位置、电子邮件地址或任何其他 URL 的超链接。</li>
</ul>
<pre><code class="language-html">     &lt;p&gt;you can search what you want at: &lt;/p&gt;
     &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;https://www.baidu.com&quot;&gt;Baidu&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://www.google.com&quot;&gt;Google&lt;/a&gt;&lt;/li&gt;
     &lt;/ul&gt;
</code></pre>
<ul>
<li>ol有序列表<br>
ordered list</li>
</ul>
<pre><code class="language-html">&lt;ol&gt;
    &lt;li&gt;王力宏&lt;/li&gt;
    &lt;li&gt;孙燕姿&lt;/li&gt;
    &lt;li&gt;张学友&lt;/li&gt;
&lt;/pl&gt;
</code></pre>
<p>输出的结果如下</p>
<pre><code> 1.王力宏
 2.孙燕姿
 3.张学友
</code></pre>
<ul>
<li>
<p>ul无序列表<br>
unordered list<br>
用法同有序列表，只是1.2.3变为· · ·</p>
</li>
<li>
<p>dl+dt+dd<br>
description list(术语列表)+term（术语）+detail（解释）用法如下：</p>
</li>
</ul>
<pre><code class="language-html">   &lt;dl class= &quot;job&quot;&gt;
       &lt;dt&gt;前端工程师&lt;/dt&gt;
       &lt;dd&gt;1.会前端2.能背锅&lt;/dd&gt;
       &lt;dt&gt;后端工程师&lt;/dt&gt;
       &lt;dd&gt;1.会后端2.能背锅&lt;/dd&gt;
       &lt;dt&gt;全栈工程师&lt;/dt&gt;
       &lt;dd&gt;1.两边都沾一点2.也要能背锅&lt;/dd&gt;
    &lt;/dl&gt;
</code></pre>
<pre><code>    前端工程师
       1.会前端2.能背锅
    后端工程师
       1.会后端2.能背锅
    全栈工程师
       1.两边都沾一点2.也要能背锅
</code></pre>
<ul>
<li>
<p>em和strong<br>
em: emphasis的意思，用于语气强调，强调部分会以以斜体显示<br>
strong: strong也用于强调，强调部分会以粗体显示</p>
</li>
<li>
<p>code<br>
用于突出代码内容，会以等宽字体显示,若有换行，则需要搭配pre</p>
</li>
</ul>
<pre><code class="language-html">    &lt;p&gt;这里是文本 &lt;code&gt;不换行的代码内容&lt;/code&gt; 这里是文本 &lt;/p&gt;
    &lt;p&gt;这里是文本 &lt;pre&gt;&lt;code&gt;    换行的
 代码内容&lt;/code&gt; &lt;/pre&gt;这里是文本 &lt;/p&gt;
     
</code></pre>
<ul>
<li>pre<br>
在该元素中的文本通常按照原文件中的编排，以等宽字体的形式展现出来</li>
</ul>
<pre><code class="language-html">     &lt;p&gt;  HTML 代码里的多处空格、回车、tab 等内容，默认会被转化为一个空格   &lt;/p&gt;
     &lt;p&gt; &lt;pre&gt;带有pre标签的文本会按照原文件的编排显示出来&lt;/pre&gt; &lt;/p&gt;
</code></pre>
]]></content>
    </entry>
</feed>